// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"database/sql"
	"github.com/deduardolima/clean-arch/internal/entity"
	"github.com/deduardolima/clean-arch/internal/event"
	"github.com/deduardolima/clean-arch/internal/infra/database"
	"github.com/deduardolima/clean-arch/internal/infra/web"
	"github.com/deduardolima/clean-arch/internal/usecase"
	"github.com/deduardolima/clean-arch/pkg/events"
	"github.com/google/wire"
)

import (
	_ "github.com/go-sql-driver/mysql"
)

// Injectors from wire.go:

func NewCreateOrderUseCase(db *sql.DB, eventDispatcher events.EventDispatcherInterface) *usecase.CreateOrderUseCase {
	orderRepository := database.NewOrderRepository(db)
	eventBundle := event.NewEventBundle()
	createOrderUseCase := usecase.NewCreateOrderUseCase(orderRepository, eventBundle, eventDispatcher)
	return createOrderUseCase
}

func NewListOrdersUseCase(db *sql.DB, eventDispatcher events.EventDispatcherInterface) *usecase.ListOrdersUseCase {
	orderRepository := database.NewOrderRepository(db)
	eventBundle := event.NewEventBundle()
	listOrdersUseCase := usecase.NewListOrdersUseCase(orderRepository, eventBundle, eventDispatcher)
	return listOrdersUseCase
}

func NewWebOrderHandler(db *sql.DB, eventDispatcher events.EventDispatcherInterface) *web.WebOrderHandler {
	orderRepository := database.NewOrderRepository(db)
	eventBundle := event.NewEventBundle()
	webOrderHandler := web.NewWebOrderHandler(eventDispatcher, orderRepository, eventBundle)
	return webOrderHandler
}

// wire.go:

var setOrderRepositoryDependency = wire.NewSet(database.NewOrderRepository, wire.Bind(new(entity.OrderRepositoryInterface), new(*database.OrderRepository)))

var setEventDispatcherDependency = wire.NewSet(events.NewEventDispatcher, wire.Bind(new(events.EventDispatcherInterface), new(*events.EventDispatcher)))

var setEventBundle = wire.NewSet(event.NewEventBundle)
